from selenium import webdriver
import time
from bs4 import BeautifulSoup
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import TimeoutException
from selenium.common.exceptions import StaleElementReferenceException
import requests
import pickle
from xml.etree import ElementTree as et
import codecs
import pandas as pd
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.by import By
from selenium import webdriver
import numpy as np
from tabulate import tabulate

#/usr/bin/python3.6
# coding: utf-8
import pandas as pd
import numpy as np
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler,Filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram import Bot
from telegram.ext import Updater
import datetime
import logging
import time

df = pd.read_csv('check_breeds.csv')

import Levenshtein as lev
from difflib import SequenceMatcher
from fuzzywuzzy import fuzz
import itertools
import pandas as pd

df = pd.read_csv('check_breeds.csv')
array_of_rus_breeds = df['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].to_numpy()



#!/usr/bin/env python
# -*- coding: utf-8 -*-
# pylint: disable=W0613, C0116
# type: ignore[union-attr]
# This program is dedicated to the public domain under the CC0 license.

"""
First, a few callback functions are defined. Then, those functions are passed to
the Dispatcher and registered at their respective places.
Then, the bot is started and runs until we press Ctrl-C on the command line.
Usage:
Example of a bot-user conversation using ConversationHandler.
Send /start to initiate the conversation.
Press Ctrl-C on the command line or send a signal to the process to stop the
bot.
"""

import logging
from typing import Dict

from telegram import ReplyKeyboardMarkup, Update, KeyboardButton, ParseMode
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext
)

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)

CHOOSING_FIRST_MENU, TYPING_BREED, TYPING_BREED_KEYBOARD, BREED_FINAL_INFO, BREED_SELECTED_RATING_TOP, DOG_PROFILE_MENU_STEPS, DOG_PROFILE_NICKNAME, DOG_PROFILE_PHOTO, TYPING_REPLY = range(9)

############################################
# all keyboards
############################################

# main menu keyboard
main_menu_reply_keyboard = [
            [KeyboardButton('üê∂–í—Å–µ –æ –ø–æ—Ä–æ–¥–µ'), KeyboardButton('üîù–†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä–æ–¥')],
            [KeyboardButton('ü§ó–ú–æ–∏ –¥—Ä—É–∑—å—è')],
            [KeyboardButton('üì∑–§–æ—Ç–æ—Å–µ—Å—Å–∏—è —Å–æ–±–∞–∫–∏'), KeyboardButton('üéÅ–ë–æ–∫—Å—ã –¥–ª—è —Å–æ–±–∞–∫')],
            [KeyboardButton('ü¶Æ–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫'), KeyboardButton('üìç–ü—Ä–∏—é—Ç—ã')],
            [KeyboardButton('üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')]
]
main_menu_markup = ReplyKeyboardMarkup(main_menu_reply_keyboard, one_time_keyboard=True)


# keyboard for breed info categories
breed_info_reply_keyboard = [
            [KeyboardButton('‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä–æ–¥–µ'), KeyboardButton('üìä–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä–æ–¥—ã')],
            [KeyboardButton('–ò—Å—Ç–æ—Ä–∏—è'), KeyboardButton('–û–ø–∏—Å–∞–Ω–∏–µ')],
            [KeyboardButton('–õ–∏—á–Ω–æ—Å—Ç—å'), KeyboardButton('–û–±—É—á–µ–Ω–∏–µ')],
            [KeyboardButton('–£—Ö–æ–¥'), KeyboardButton('–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è')],
            [KeyboardButton('–°—Ç—Ä–∏–∂–∫–∞'), KeyboardButton('–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å')],
            [KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥'), KeyboardButton('üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é')]
]

breed_info_markup = ReplyKeyboardMarkup(breed_info_reply_keyboard) #, one_time_keyboard=True)

# keyboard for breed rating categories
breed_rating_reply_keyboard = [
            [KeyboardButton('–ü–æ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏'), KeyboardButton('–ü–æ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º')],
            [KeyboardButton('–ü–æ –†–∞–∑–º–µ—Ä—É'), KeyboardButton('–ü–æ –†–∞–∑—É–º—É')],
            [KeyboardButton('–ü–æ –û—Ö—Ä–∞–Ω–µ'), KeyboardButton('–ü–æ –û—Ç–Ω–æ—à–µ–Ω–∏—é —Å –¥–µ—Ç—å–º–∏')],
            [KeyboardButton('–ü–æ –õ–æ–≤–∫–æ—Å—Ç–∏'), KeyboardButton('–ü–æ –õ–∏–Ω—è–Ω–∏—é')],
            [KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥'), KeyboardButton('üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é')]
]

breed_rating_markup = ReplyKeyboardMarkup(breed_rating_reply_keyboard) #, one_time_keyboard=True)

# keyboard for dog profile
dog_profile_main_menu = [
            [KeyboardButton('üê∂–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')],
            [KeyboardButton('ü§ó–ù–∞–π—Ç–∏ –º–æ–∏—Ö –¥—Ä—É–∑–µ–π!')],
            [KeyboardButton('ü¶Æ–ò–¥—É –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É!')],
            [KeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥'), KeyboardButton('üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é')]
]

dog_profile_main_menu_markup = ReplyKeyboardMarkup(dog_profile_main_menu) #, one_time_keyboard=True)



############################################
# general defs
############################################

def facts_to_str(user_data: Dict[str, str]) -> str:
    facts = list()

    for key, value in user_data.items():
        facts.append(f'{key} - {value}')

    return "\n".join(facts).join(['\n', '\n'])


def start(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∑–Ω–∞—é –≤—Å–µ –æ —Å–æ–±–∞–∫–∞—Ö –∏ –º–æ–≥—É –ø–æ–º–æ—á—å –í–∞–º –≤–æ –≤—Å–µ–º. –í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –º–µ–Ω—é",
        reply_markup=main_menu_markup,
    )

    return CHOOSING_FIRST_MENU

##########################################
# breed info defs
##########################################
def all_about_breeds_choice(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['choice'] = text
    update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä–æ–¥—É —Å–æ–±–∞–∫, –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å:')

    return TYPING_BREED

def all_about_breeds_choice_keyboard(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data
    text = update.message.text
    category = user_data['choice']
    user_data[category] = text

    dict_of_distances = {}

    for i in array_of_rus_breeds:
        match_ratio = fuzz.partial_ratio(text.lower(), i.lower())
        dict_of_distances[i] = match_ratio

    sorted_dict_of_distances = dict(sorted(dict_of_distances.items(), key=lambda x: x[1], reverse=True))
    x = itertools.islice(sorted_dict_of_distances.items(), 0, 10)

    array_of_buttons = []
    for key, value in x:
        if value >= 0.8:
            array_of_buttons.append(key)


    fit_array_of_buttons = []
    for i in array_of_buttons:
        fit_array_of_buttons.append([KeyboardButton(i)])
    breeds_menu = ReplyKeyboardMarkup(fit_array_of_buttons, one_time_keyboard=True)

    update.message.reply_text(
        "–í—ã–±–µ—Ä–µ—Ç–µ –ø–æ—Ä–æ–¥—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –º–µ–Ω—é –Ω–∏–∂–µ",
        reply_markup = breeds_menu
    )

    return TYPING_BREED_KEYBOARD

def selected_breed_info_category(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['proper_breed_rus'] = text

    update.message.reply_text(
        "–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Ä–æ–¥–µ",
        reply_markup = breed_info_markup
    )
    print(context.user_data)
    return BREED_FINAL_INFO

def push_breed_info(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['breed_info_category'] = text
    print(context.user_data)

    df_breed = df[df['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'] == context.user_data['proper_breed_rus']].copy()

    if text == '‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä–æ–¥–µ':
        breed_name_rus = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].values[0]
        breed_name_eng = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)'].values[0]
        breed_country = df_breed['–°—Ç—Ä–∞–Ω–∞'].values[0]
        breed_lifespan = df_breed['–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏'].values[0]
        breed_height = df_breed['–í—ã—Å–æ—Ç–∞'].values[0]
        breed_weight = df_breed['–í–µ—Å'].values[0]
        breed_fur_length = df_breed['–î–ª–∏–Ω–Ω–∞ —à–µ—Ä—Å—Ç–∏'].values[0]
        breed_colour = df_breed['–¶–≤–µ—Ç'].values[0]
        breed_group = df_breed['–ì—Ä—É–ø–ø–∞'].values[0]
        breed_price = df_breed['–¶–µ–Ω–∞'].values[0]

        update.message.reply_text(
            '''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)</b> - {0}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)</b> - {1}
<b>–°—Ç—Ä–∞–Ω–∞</b> - {2}
<b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏</b> - {3}
<b>–í—ã—Å–æ—Ç–∞</b> - {4}
<b>–í–µ—Å</b> - {5}
<b>–î–ª–∏–Ω–∞ —à–µ—Ä—Å—Ç–∏</b> - {6}
<b>–¶–≤–µ—Ç</b> - {7}
<b>–ì—Ä—É–ø–ø–∞</b> - {8}
<b>–¶–µ–Ω–∞</b> - {9}
            '''.format(breed_name_rus, breed_name_eng, breed_country, breed_lifespan, breed_height, \
                      breed_weight, breed_fur_length, breed_colour, breed_group, breed_price),
            parse_mode=ParseMode.HTML,
            reply_markup = breed_info_markup
        )
    elif text == 'üìä–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä–æ–¥—ã':
        breed_name_rus = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].values[0]
        breed_name_eng = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)'].values[0]
        breed_popularity = str(df_breed['–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å'].values[0])
        breed_training = str(df_breed['–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'].values[0])
        breed_size = str(df_breed['–†–∞–∑–º–µ—Ä'].values[0])
        breed_intellect = str(df_breed['–†–∞–∑—É–º'].values[0])
        breed_guard = str(df_breed['–û—Ö—Ä–∞–Ω–∞'].values[0])
        breed_relations_with_children = str(df_breed['–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥–µ—Ç—å–º–∏'].values[0])
        breed_agility = str(df_breed['–õ–æ–≤–∫–æ—Å—Ç—å'].values[0])
        breed_fading = str(df_breed['–õ–∏–Ω—è–Ω–∏–µ'].values[0])

        update.message.reply_text(
            '''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)</b> - {0}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)</b> - {1}
<b>–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å</b> - {2} / 10
<b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</b> - {3} / 10
<b>–†–∞–∑–º–µ—Ä</b> - {4} / 10
<b>–†–∞–∑—É–º</b> - {5} / 10
<b>–û—Ö—Ä–∞–Ω–∞</b> - {6} / 10
<b>–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥–µ—Ç—å–º–∏</b> - {7} / 10
<b>–õ–æ–≤–∫–æ—Å—Ç—å</b> - {8} / 10
<b>–õ–∏–Ω—è–Ω–∏–µ</b> - {9} / 10
            '''.format(breed_name_rus, breed_name_eng, breed_popularity, breed_training, breed_size, \
                      breed_intellect, breed_guard, breed_relations_with_children, breed_agility, breed_fading),
            parse_mode=ParseMode.HTML,
            reply_markup = breed_info_markup
        )
    elif text == '–ò—Å—Ç–æ—Ä–∏—è':
        breed_name_rus = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].values[0]
        breed_name_eng = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)'].values[0]
        breed_history = str(df_breed['–ò—Å—Ç–æ—Ä–∏—è'].values[0])

        update.message.reply_text(
            '''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)</b> - {0}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)</b> - {1}

<b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ä–æ–¥—ã</b>
{2}
            '''.format(breed_name_rus, breed_name_eng, breed_history),
            parse_mode=ParseMode.HTML,
            reply_markup = breed_info_markup
        )

    elif text == '–û–ø–∏—Å–∞–Ω–∏–µ':
        breed_name_rus = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].values[0]
        breed_name_eng = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)'].values[0]
        breed_description = str(df_breed['–û–ø–∏—Å–∞–Ω–∏–µ'].values[0])

        update.message.reply_text(
            '''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)</b> - {0}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)</b> - {1}

<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã</b>
{2}
            '''.format(breed_name_rus, breed_name_eng, breed_description),
            parse_mode=ParseMode.HTML,
            reply_markup = breed_info_markup
        )

    elif text == '–õ–∏—á–Ω–æ—Å—Ç—å':
        breed_name_rus = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].values[0]
        breed_name_eng = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)'].values[0]
        breed_personality = str(df_breed['–õ–∏—á–Ω–æ—Å—Ç—å'].values[0])

        update.message.reply_text(
            '''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)</b> - {0}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)</b> - {1}

<b>–õ–∏—á–Ω–æ—Å—Ç—å –ø–æ—Ä–æ–¥—ã</b>
{2}
            '''.format(breed_name_rus, breed_name_eng, breed_personality),
            parse_mode=ParseMode.HTML,
            reply_markup = breed_info_markup
        )

    elif text == '–û–±—É—á–µ–Ω–∏–µ':
        breed_name_rus = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].values[0]
        breed_name_eng = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)'].values[0]
        breed_training = str(df_breed['–û–±—É—á–µ–Ω–∏–µ'].values[0])

        update.message.reply_text(
            '''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)</b> - {0}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)</b> - {1}

<b>–û–±—É—á–µ–Ω–∏–µ –ø–æ—Ä–æ–¥—ã</b>
{2}
            '''.format(breed_name_rus, breed_name_eng, breed_training),
            parse_mode=ParseMode.HTML,
            reply_markup = breed_info_markup
        )

    elif text == '–£—Ö–æ–¥':
        breed_name_rus = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].values[0]
        breed_name_eng = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)'].values[0]
        breed_care = str(df_breed['–£—Ö–æ–¥'].values[0])

        update.message.reply_text(
            '''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)</b> - {0}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)</b> - {1}

<b>–£—Ö–æ–¥ –∑–∞ –ø–æ—Ä–æ–¥–æ–π</b>
{2}
            '''.format(breed_name_rus, breed_name_eng, breed_care),
            parse_mode=ParseMode.HTML,
            reply_markup = breed_info_markup
        )

    elif text == '–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è':
        breed_name_rus = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].values[0]
        breed_name_eng = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)'].values[0]
        breed_diseases = str(df_breed['–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è'].values[0])

        update.message.reply_text(
            '''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)</b> - {0}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)</b> - {1}

<b>–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —É –ø–æ—Ä–æ–¥—ã</b>
{2}
            '''.format(breed_name_rus, breed_name_eng, breed_diseases),
            parse_mode=ParseMode.HTML,
            reply_markup = breed_info_markup
        )

    elif text == '–°—Ç—Ä–∏–∂–∫–∞':
        breed_name_rus = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].values[0]
        breed_name_eng = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)'].values[0]
        breed_haircut = str(df_breed['–°—Ç—Ä–∏–∂–∫–∞'].values[0])

        update.message.reply_text(
            '''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)</b> - {0}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)</b> - {1}

<b>–°—Ç—Ä–∏–∂–∫–∞ –ø–æ—Ä–æ–¥—ã</b>
{2}
            '''.format(breed_name_rus, breed_name_eng, breed_haircut),
            parse_mode=ParseMode.HTML,
            reply_markup = breed_info_markup
        )

    elif text == '–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å':
        breed_name_rus = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)'].values[0]
        breed_name_eng = df_breed['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)'].values[0]
        breed_usefulness = str(df_breed['–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å'].values[0])

        update.message.reply_text(
            '''
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (—Ä—É—Å)</b> - {0}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã (–∞–Ω–≥–ª)</b> - {1}

<b>–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å –ø–æ—Ä–æ–¥—ã</b>
{2}
            '''.format(breed_name_rus, breed_name_eng, breed_usefulness),
            parse_mode=ParseMode.HTML,
            reply_markup = breed_info_markup
        )

    else:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", reply_markup = breed_info_markup)

    return BREED_FINAL_INFO

##########################################
# breed rating defs
##########################################

def breed_rating_choose(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['top_category'] = text
    update.message.reply_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ—Ä–æ–¥ –≤ –º–µ–Ω—é:',
        reply_markup = breed_rating_markup)
    return BREED_SELECTED_RATING_TOP

def get_breed_rating_top(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['top_category'] = text

#     print(update.message)
#     print(update)
    print(update.message)
    print(update.message.photo[-1].file_id)
    file_id = update.message.photo[-1].file_id
    newFile = update.message.bot.getFile(file_id)
    newFile.download('dogs_profiles_photos/test.jpg')

    if text == '–ü–æ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏':
        update.message.bot.send_photo(update.message.chat.id, open('dogs_ratings/–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å.png','rb'))
    elif text == '–ü–æ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º':
        update.message.bot.send_photo(update.message.chat.id, open('dogs_ratings/–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.png','rb'))
    elif text == '–ü–æ –†–∞–∑–º–µ—Ä—É':
        update.message.bot.send_photo(update.message.chat.id, open('dogs_ratings/–†–∞–∑–º–µ—Ä.png','rb'))
    elif text == '–ü–æ –†–∞–∑—É–º—É':
        update.message.bot.send_photo(update.message.chat.id, open('dogs_ratings/–†–∞–∑—É–º.png','rb'))
    elif text == '–ü–æ –û—Ö—Ä–∞–Ω–µ':
        update.message.bot.send_photo(update.message.chat.id, open('dogs_ratings/–û—Ö—Ä–∞–Ω–∞.png','rb'))
    elif text == '–ü–æ –û—Ç–Ω–æ—à–µ–Ω–∏—é —Å –¥–µ—Ç—å–º–∏':
        update.message.bot.send_photo(update.message.chat.id, open('dogs_ratings/–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥–µ—Ç—å–º–∏.png','rb'))
    elif text == '–ü–æ –õ–æ–≤–∫–æ—Å—Ç–∏':
        update.message.bot.send_photo(update.message.chat.id, open('dogs_ratings/–õ–æ–≤–∫–æ—Å—Ç—å.png','rb'))
    elif text == '–ü–æ –õ–∏–Ω—è–Ω–∏—é':
        update.message.bot.send_photo(update.message.chat.id, open('dogs_ratings/–õ–∏–Ω—è–Ω–∏–µ.png','rb'))
    else:
        update.message.reply_text('–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')

    return BREED_SELECTED_RATING_TOP

##########################################
# breed social network defs
##########################################

def dog_social_network(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['sn_category'] = text
    update.message.reply_text(f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ—Ñ–∏–ª—è –≤ –º–µ–Ω—é:',
        reply_markup = dog_profile_main_menu_markup)
    return DOG_PROFILE_MENU_STEPS

def dog_print_get_nickname(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['previous_category'] = text
    print()
    update.message.reply_text(f'–í–≤–µ–¥–∏—Ç–µ –ö–ª–∏—á–∫—É –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏')

    return DOG_PROFILE_NICKNAME

def dog_print_get_photo(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    date = update.message.date
    chat_id = update.message.chat.id
    username = update.message.chat.username
    first_name = update.message.chat.first_name
    last_name = update.message.chat.last_name

    context.user_data['username'] = username
    context.user_data['first_name'] = first_name
    context.user_data['last_name'] = last_name
    context.user_data['chat_id'] = chat_id
    context.user_data['date'] = date
    context.user_data['dog_nickname'] = text
    print(update.message)
    update.message.reply_text(f'–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–º —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏')

    return DOG_PROFILE_PHOTO

def dog_get_all_data_received(update: Update, context: CallbackContext) -> int:
#    user_data = context.user_data
#     text = update.message.text
#     chat_id = update.message.chat.id
#     username = update.message.chat.username
#     first_name = update.message.chat.first_name
#     last_name = update.message.chat.last_name
#     user_data['chat_id'] = chat_id
#     user_data['dog_nickname'] = text
#    del user_data['dog_profile_choice']
    context.user_data['photo_id'] = update.message.photo[-1].file_id
    print(context.user_data)

    update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∏–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –í—ã –º–Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏:"
        f"{facts_to_str(context.user_data)} –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –µ—â–µ –æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–µ"
        " on something."
    )

    file_id = update.message.photo[-1].file_id
    newFile = update.message.bot.getFile(file_id)
    newFile.download('dogs_profiles_photos/terra.jpg')

    update.message.reply_text("–í—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–æ—Ç–æ –≤–∞—à–µ–π —Å–æ–±–∞–∫–∏ –≤ —Å–æ—Ü—Å–µ—Ç—å")

    return DOG_PROFILE_NICKNAME

##########################################
# test location defs
##########################################

def location_test(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['menu_title'] = text

    update.message.bot.sendLocation(update.message.chat.id, 55.744606, 37.733347)
    update.message.bot.sendLocation(update.message.chat.id, 55.746551, 37.731383)

    return CHOOSING_FIRST_MENU

#    bot.send_photo(chat_id=chat_id, photo=open('tests/test.png', 'rb'))

# def keyboard_of_proper_breeds(update: Update, context: CallbackContext) -> int:



# ##### example def-s
def regular_choice(update: Update, context: CallbackContext) -> int:
    text = update.message.text
    context.user_data['choice'] = text
    update.message.reply_text(f'Your {text.lower()}? Yes, I would love to hear about that!')

    return TYPING_REPLY


def custom_choice(update: Update, context: CallbackContext) -> int:
    update.message.reply_text(
        'Alright, please send me the category first, ' 'for example "Most impressive skill"'
    )

    return TYPING_CHOICE


def received_information(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data
    text = update.message.text
    category = user_data['choice']
    user_data[category] = text
    del user_data['choice']

    update.message.reply_text(
        "Neat! Just so you know, this is what you already told me:"
        f"{facts_to_str(user_data)} You can tell me more, or change your opinion"
        " on something.",
        reply_markup=main_menu_markup,
    )

    return CHOOSING


def done(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data
    if 'choice' in user_data:
        del user_data['choice']

    update.message.reply_text(
        f"I learned these facts about you: {facts_to_str(user_data)} Until next time!"
    )

    user_data.clear()
    return ConversationHandler.END


def main() -> None:
    # Create the Updater and pass it your bot's token.
    # Make sure to set use_context=True to use the new context based callbacks
    # Post version 12 this will no longer be necessary
    updater = Updater("your_telegram_bot_token_here", use_context=True)

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Add conversation handler with the states CHOOSING, TYPING_CHOICE and TYPING_REPLY
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            # —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            CHOOSING_FIRST_MENU: [
                # handler to run all about breeds
                MessageHandler(
                    Filters.regex('^(üê∂–í—Å–µ –æ –ø–æ—Ä–æ–¥–µ)$'), all_about_breeds_choice
                ),
                MessageHandler(
                    Filters.regex('^(üîù–†–µ–π—Ç–∏–Ω–≥ –ø–æ—Ä–æ–¥)$'), breed_rating_choose
                ),
                MessageHandler(
                    Filters.regex('^(ü§ó–ú–æ–∏ –¥—Ä—É–∑—å—è)$'), dog_social_network
                ),
                MessageHandler(
                    Filters.regex('^(üìç–ü—Ä–∏—é—Ç—ã)$'), location_test
                )
            ],

            # —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä–æ–¥–µ"
            TYPING_BREED: [
                MessageHandler(
                    Filters.text & ~(Filters.command | Filters.regex('^Done$')), all_about_breeds_choice_keyboard,
                )
            ],

            TYPING_BREED_KEYBOARD: [
                MessageHandler(
                    Filters.text & ~(Filters.command | Filters.regex('^Done$')), selected_breed_info_category,
                )
            ],

            BREED_FINAL_INFO: [
                MessageHandler(
                    Filters.regex('^(‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ä–æ–¥–µ|üìä–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä–æ–¥—ã|–ò—Å—Ç–æ—Ä–∏—è|–û–ø–∏—Å–∞–Ω–∏–µ|–õ–∏—á–Ω–æ—Å—Ç—å|–û–±—É—á–µ–Ω–∏–µ|–£—Ö–æ–¥|–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è|–°—Ç—Ä–∏–∂–∫–∞|–ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å)$'), push_breed_info
                ),
                MessageHandler(Filters.regex('^(‚Ü©Ô∏è–ù–∞–∑–∞–¥)$'), all_about_breeds_choice),
                MessageHandler(Filters.regex('^(üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é)$'), start),
            ],

            # —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é "–¢–æ–ø –ø–æ—Ä–æ–¥ —Å–æ–±–∞–∫"
            BREED_SELECTED_RATING_TOP: [
                MessageHandler(
                    Filters.regex('^(–ü–æ –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏|–ü–æ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º|–ü–æ –†–∞–∑–º–µ—Ä—É|–ü–æ –†–∞–∑—É–º—É|–ü–æ –û—Ö—Ä–∞–Ω–µ|–ü–æ –û—Ç–Ω–æ—à–µ–Ω–∏—é —Å –¥–µ—Ç—å–º–∏|–ü–æ –õ–æ–≤–∫–æ—Å—Ç–∏|–ü–æ –õ–∏–Ω—è–Ω–∏—é)$'), get_breed_rating_top
                ),
#               MessageHandler(Filters.photo, get_breed_rating_top),
#               update.message.photo[-1].file_id
                MessageHandler(Filters.regex('^(‚Ü©Ô∏è–ù–∞–∑–∞–¥)$'), start),
                MessageHandler(Filters.regex('^(üè†–ù–∞ –≥–ª–∞–≤–Ω—É—é)$'), start),
            ],

            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
            DOG_PROFILE_MENU_STEPS: [
                MessageHandler(Filters.regex('^(üê∂–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å)$'), dog_print_get_nickname)
            ],

            DOG_PROFILE_NICKNAME: [
                MessageHandler(
                    Filters.text & ~(Filters.command | Filters.regex('^Done$')), dog_print_get_photo,
                )
            ],

            DOG_PROFILE_PHOTO: [
                MessageHandler(Filters.photo, dog_get_all_data_received)
            ],

            # –î—Ä—É–≥–æ–µ
            TYPING_REPLY: [
                MessageHandler(
                    Filters.text & ~(Filters.command | Filters.regex('^Done$')),
                    received_information,
                )
            ],
        },
        fallbacks=[MessageHandler(Filters.regex('^Done$'), done)],
    )

    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()

if __name__ == '__main__':
    main()
